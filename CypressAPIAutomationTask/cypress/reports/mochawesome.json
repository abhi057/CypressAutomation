{
  "stats": {
    "suites": 2,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-03T12:51:02.387Z",
    "end": "2024-12-03T12:51:04.323Z",
    "duration": 1936,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "abee407f-3076-42fd-a14b-b3991d9448e1",
      "title": "",
      "fullFile": "cypress\\e2e\\combinedTests.cy.js",
      "file": "cypress\\e2e\\combinedTests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "593f1ac5-7ba4-434b-82e9-4300572c4516",
          "title": "Add a New Pet to the Store",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully add a new pet",
              "fullTitle": "Add a New Pet to the Store should successfully add a new pet",
              "timedOut": null,
              "duration": 1140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/pet',\n  body: pet,\n  headers: {\n    'Content-Type': 'application/json',\n    'api_key': 'api_key'\n  }\n}).then(response => {\n  // Assertions for a successful request\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', pet.id);\n  expect(response.body).to.have.property('name', pet.name);\n  expect(response.body).to.have.property('status', pet.status);\n  expect(response.body.category).to.have.property('id', pet.category.id);\n  expect(response.body.category).to.have.property('name', pet.category.name);\n  expect(response.body.photoUrls).to.be.an('array').and.have.members(pet.photoUrls);\n  expect(response.body.tags).to.be.an('array').and.have.length(1);\n  expect(response.body.tags[0]).to.have.property('id', pet.tags[0].id);\n  expect(response.body.tags[0]).to.have.property('name', pet.tags[0].name);\n});",
              "err": {},
              "uuid": "8471c50c-cc9d-49e0-ae9a-1b5adc6fbd73",
              "parentUUID": "593f1ac5-7ba4-434b-82e9-4300572c4516",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 405 for an invalid request",
              "fullTitle": "Add a New Pet to the Store should return 405 for an invalid request",
              "timedOut": null,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PATCH',\n  // Using an unsupported method for the `/pet` endpoint\n  url: '/pet',\n  failOnStatusCode: false // Prevent Cypress from failing the test on non-2xx/3xx status codes\n}).then(response => {\n  // Assertions for a 405 error\n  expect(response.status).to.eq(405);\n});",
              "err": {},
              "uuid": "064ca5d5-405f-4310-9d62-7cb85774f6e0",
              "parentUUID": "593f1ac5-7ba4-434b-82e9-4300572c4516",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8471c50c-cc9d-49e0-ae9a-1b5adc6fbd73",
            "064ca5d5-405f-4310-9d62-7cb85774f6e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1367,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e5e5f2d-1aa8-40dc-b207-d69a2cd4e849",
          "title": "Find Pet by ID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully find a pet by valid ID",
              "fullTitle": "Find Pet by ID should successfully find a pet by valid ID",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/pet/${validPetId}`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(response => {\n  // Assertions for a successful request\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', validPetId);\n  expect(response.body).to.have.property('name').and.to.be.a('string');\n  expect(response.body).to.have.property('status').and.to.be.a('string');\n});",
              "err": {},
              "uuid": "846fefe2-cf3c-46d4-b89d-3875c4de3e9a",
              "parentUUID": "5e5e5f2d-1aa8-40dc-b207-d69a2cd4e849",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when pet is not found",
              "fullTitle": "Find Pet by ID should return 404 when pet is not found",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `/pet/${nonExistentPetId}`,\n  // Using a non-existent pet ID\n  failOnStatusCode: false // Prevent Cypress from failing the test\n}).then(response => {\n  // Assertions for a 404 error\n  expect(response.status).to.eq(404);\n  expect(response.body).to.have.property('code', 1);\n  expect(response.body).to.have.property('type', 'error');\n  expect(response.body).to.have.property('message', 'Pet not found'); // As per the API's spec\n});",
              "err": {},
              "uuid": "875def7d-8bf4-4c60-81da-7ffc58c2d7ca",
              "parentUUID": "5e5e5f2d-1aa8-40dc-b207-d69a2cd4e849",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "846fefe2-cf3c-46d4-b89d-3875c4de3e9a",
            "875def7d-8bf4-4c60-81da-7ffc58c2d7ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 462,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}